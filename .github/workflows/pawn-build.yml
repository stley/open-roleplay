# .github/workflows/pawn-build-windows.yml
name: Pawn Build (Windows)
on:
  pull_request:
    branches: ["**"]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Fetch pawncc v3.10.11 (Windows)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $url = 'https://github.com/openmultiplayer/compiler/releases/download/v3.10.11/pawnc-3.10.11-windows.zip'
          Invoke-WebRequest $url -OutFile pawncc.zip
          New-Item -ItemType Directory -Path pawnc-bin | Out-Null
          Expand-Archive -Path pawncc.zip -DestinationPath pawnc-bin -Force
          # Find extracted root dir (avoids hardcoding)
          $root = Get-ChildItem pawnc-bin -Directory | Where-Object { $_.Name -like 'pawnc-*windows*' } | Select-Object -First 1
          if (-not $root) { Write-Error 'Cannot locate extracted pawnc root' }
          $full = (Resolve-Path $root.FullName).Path
          "PAWN_ROOT=$full" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Get-ChildItem -Recurse $full

      - name: Validate layout
        shell: pwsh
        run: |
          if (-not (Test-Path 'gamemodes\main.pwn')) { Write-Error 'missing gamemodes\main.pwn' }
          if (-not (Test-Path 'qawno\include'))     { Write-Error 'missing qawno\include' }
          if (-not (Test-Path 'gamemodes\modules')) { Write-Error 'missing gamemodes\modules' }

      - name: Compile main.pwn (warnings fail, no artifact)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $root = $env:PAWN_ROOT
          if (-not $root) { Write-Error 'PAWN_ROOT not set' }
          $exe  = Join-Path $root 'bin\pawncc.exe'
          # Use stop-parsing to pass special flags -;+ and -(+
          & "$exe" --% gamemodes\main.pwn -iqawno\include -igamemodes\modules -d3 -Z+ -E -;+ -(+ -oNUL 2>&1 | Tee-Object -FilePath build.log
          $rc = $LASTEXITCODE
          $warns = (Select-String -Path build.log -Pattern 'warning\s+\d+:' -AllMatches | Measure-Object).Count
          Write-Host "pawncc exit=$rc warnings=$warns"
          if ($rc -ne 0) { Write-Host '::error::pawncc exit ' $rc; Get-Content build.log -Tail 200; exit $rc }
          if ($warns -gt 0) { Write-Host "::error::Pawn warnings detected ($warns)"; Select-String build.log -Pattern 'warning\s+\d+:' | Select-Object -Last 100; exit 1 }
          Write-Host 'OK: no warnings'
