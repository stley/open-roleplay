# .github/workflows/pawn-build.yml
name: Pawn Build
on:
  pull_request:
    branches: ["**"]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # point loader to the release's lib/
      LD_LIBRARY_PATH: ${{ github.workspace }}/pawnc-bin/lib
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Fetch pawncc v3.10.11 (Linux x64)
        shell: bash
        run: |
          set -euo pipefail
          URL="https://github.com/openmultiplayer/compiler/releases/download/v3.10.11/pawnc-3.10.11-linux.tar.gz"
          echo "Downloading: $URL"
          curl -fsSL "$URL" -o pawncc.tar.gz
          mkdir -p pawnc-bin
          tar -xzf pawncc.tar.gz -C pawnc-bin
          ls -la pawnc-bin pawnc-bin/bin pawnc-bin/lib || true
          chmod +x pawnc-bin/bin/pawncc
          file pawnc-bin/bin/pawncc || true
          ldd pawnc-bin/bin/pawncc || true

      - name: Validate layout
        shell: bash
        run: |
          set -e
          test -f gamemodes/main.pwn || { echo "::error::missing gamemodes/main.pwn"; exit 1; }
          test -d qawno/include      || { echo "::error::missing qawno/include"; exit 1; }
          test -d gamemodes/modules  || { echo "::error::missing gamemodes/modules"; exit 1; }

      - name: Compile main.pwn (warnings fail, no artifact)
        shell: bash
        run: |
          set -o pipefail
          TARGET="gamemodes/main.pwn"

          INCLUDES=(-i qawno/include -i gamemodes -i gamemodes/modules)
          while IFS= read -r -d '' d; do INCLUDES+=(-i "$d"); done < <(find gamemodes/modules -type d -print0)

          echo "Include paths:" "${INCLUDES[@]}"
          pawnc-bin/bin/pawncc "$TARGET" "${INCLUDES[@]}" -d3 -Z+ -E -o /dev/null 2>&1 | tee build.log
          ec=${PIPESTATUS[0]}
          warns=$(grep -Eic 'warning[[:space:]]+[0-9]+:' build.log || true)
          errs=$(grep -Eic 'error[[:space:]]+[0-9]+:' build.log || true)
          echo "pawncc exit: $ec  warnings: $warns  errors: $errs"
          if [ $ec -ne 0 ]; then echo "::error::pawncc exit $ec"; tail -n 200 build.log || true; exit $ec; fi
          if [ "$warns" -gt 0 ]; then echo "::error::Pawn warnings detected ($warns). Failing build."; grep -Ein 'warning[[:space:]]+[0-9]+:' build.log | tail -n 100 || true; exit 1; fi
          echo "OK: no warnings"