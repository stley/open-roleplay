# .github/workflows/pawn-build-windows.yml
name: Pawn Build (Windows)

on:
  push:
    branches: [main]
  pull_request:
  schedule:
    # 06:00 UTC daily ? 03:00 America/Argentina/Buenos_Aires
    - cron: "0 6 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Fetch pawncc v3.10.11 (Windows)
        shell: pwsh
        run: |
          $u='https://github.com/openmultiplayer/compiler/releases/download/v3.10.11/pawnc-3.10.11-windows.zip'
          Invoke-WebRequest $u -OutFile pawncc.zip
          New-Item -ItemType Directory -Path pawnc-bin | Out-Null
          Expand-Archive -Path pawncc.zip -DestinationPath pawnc-bin -Force
          $root = Get-ChildItem pawnc-bin -Directory | Where-Object { $_.Name -like 'pawnc-*windows*' } | Select-Object -First 1
          if (-not $root) { throw 'pawnc root not found' }
          "PAWN_ROOT=$((Resolve-Path $root.FullName).Path)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Validate layout
        shell: pwsh
        run: |
          if (-not (Test-Path 'src\main.pwn')) { throw 'missing src\main.pwn' }
          if (-not (Test-Path 'include'))     { throw 'missing include\ folder' }
          if (-not (Test-Path 'src')) { throw 'missing src\ folder' }

      - name: Compile to AMX (warnings fail except 203)
        shell: cmd
        run: |
          setlocal
          set "ROOT=%PAWN_ROOT%"
          if not exist "%ROOT%\bin\pawncc.exe" exit /b 1
          if not exist build mkdir build
          "%ROOT%\bin\pawncc.exe" src\main.pwn -iinclude -isrc -d3 -Z+ -;+ -(+ -obuild\main.amx 1>build.log 2>&1
          set EC=%ERRORLEVEL%
          findstr /ri "warning[ ][0-9][0-9]*:" build.log > all_warns.txt
          findstr /ri "warning 203:" all_warns.txt > warns_203.txt
          findstr /ri "warning[ ][0-9][0-9]*:" all_warns.txt | findstr /v "warning 203:" > warns_other.txt
          for /f "delims=" %%A in ('find /c /v "" ^< warns_203.txt') do set "WARNS203=%%A"
          for /f "delims=" %%A in ('find /c /v "" ^< warns_other.txt') do set "WARNSOTHER=%%A"
          echo pawncc exit=%EC% warnings(except 203)=%WARNSOTHER% ignored203=%WARNS203%
          if not %EC%==0 (type build.log & exit /b %EC%)
          if not "%WARNS203%"=="0" echo "::notice::Ignored %WARNS203% warning(s) 203"
          if not "%WARNSOTHER%"=="0" (echo "::error::Warnings (%WARNSOTHER%)" & type warns_other.txt & exit /b 1)
          echo OK

      - name: Set artifact name (dev vs nightly)
        shell: pwsh
        run: |
          if ($env:GITHUB_EVENT_NAME -eq 'pull_request' -and $env:PR_NUMBER) {
            $name = "dev-pr-$($env:PR_NUMBER)"
          } elseif ($env:GITHUB_REF_NAME -eq 'main') {
            $name = "nightly-main"
          } else {
            $name = "build-$($env:GITHUB_REF_NAME)"
          }
          "ARTIFACT_NAME=$name" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "Artifact: $name"

      - name: Upload build bundle
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            build/main.amx
            models/**
            components/**/*.dll
            components/**/*.so
            components/**/*.cfg
            plugins/**/*.dll
            plugins/**/*.so
            plugins/**/*.cfg
            libs/**/*.dll
            libs/**/*.so
            wrappers/run-offline.sh
            wrappers/run-offline.ps1
            wrappers/run-offline.bat
          if-no-files-found: ignore
          retention-days: 7

  release-nightly:
    if: >
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
      || github.event_name == 'schedule'
      || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
    needs: build
    runs-on: ubuntu-latest
    concurrency:
      group: nightly-main
      cancel-in-progress: true
    env:
      NIGHTLY_TAG: nightly
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: nightly-main
          path: bundle

      - name: Ensure bundle exists
        run: |
          set -e
          shopt -s nullglob
          files=(bundle/**)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No bundle found. Skipping release."
            exit 0
          fi

      - name: Prepare open.mp-style nightly.zip
        run: |
          set -euo pipefail
          work="$(mktemp -d)"
          mkdir -p "$work/build" "$work/plugins" "$work/components" "$work/libs" "$work/models"
          rsync -a bundle/ "$work/"
          if [ ! -f "$work/build/main.amx" ]; then
            echo "build/main.amx missing in artifact" >&2
            exit 1
          fi
          [ -f "$work/wrappers/run-offline.ps1" ] && mv "$work/wrappers/run-offline.ps1" "$work/run-offline.ps1" || true
          [ -f "$work/wrappers/run-offline.bat" ] && mv "$work/wrappers/run-offline.bat" "$work/run-offline.bat" || true
          [ -f "$work/wrappers/run-offline.sh" ]  && mv "$work/wrappers/run-offline.sh"  "$work/run-offline.sh"  || true
          rmdir "$work/wrappers" 2>/dev/null || true
          find "$work" -type d -empty -delete || true
          mkdir -p "$GITHUB_WORKSPACE/out"
          (cd "$work" && zip -r9 "$GITHUB_WORKSPACE/out/nightly.zip" .)
          ls -l "$GITHUB_WORKSPACE/out"

      - name: Create or update rolling nightly release
        run: |
          set -euo pipefail
          if gh release view "$NIGHTLY_TAG" >/dev/null 2>&1; then
            echo "Nightly exists"
          else
            gh release create "$NIGHTLY_TAG" --title "Nightly" --notes "Synchronized build with the latest commits into main." --prerelease || true
          fi
          git fetch --tags
          git tag -f "$NIGHTLY_TAG" "${GITHUB_SHA}"
          git push -f origin "$NIGHTLY_TAG"

      - name: Replace assets
        run: |
          set -euo pipefail
          gh release delete-asset "$NIGHTLY_TAG" nightly.zip -y || true
          gh release upload "$NIGHTLY_TAG" out/nightly.zip --clobber
          gh release edit "$NIGHTLY_TAG" --prerelease --latest=false --title "Nightly"